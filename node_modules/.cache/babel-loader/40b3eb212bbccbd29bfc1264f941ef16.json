{"ast":null,"code":"var _jsxFileName = \"/Users/andreluizbranco/Desktop/react_IGTI/desafio2/src/App.js\";\nimport React, { Component } from 'react';\nimport Countries from './components/countries/Countries';\nimport Headers from './components/countries/header/Headers';\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.calculateTotalPopulationFrom = countries => {\n      const totalPopulation = countries.reduce((accumulator, current) => {\n        return accumulator + current.population;\n      }, 0);\n      return totalPopulation;\n    };\n\n    this.handleChangeFilter = newText => {\n      //console.log(newFilter);\n      this.setState({\n        filter: newText\n      });\n      const filterLowerCase = newText.toLowerCase();\n      const filteredCountries = this.state.allCountries.filter(country => {\n        return country.filterName.includes(filterLowerCase);\n      });\n      const filteredPopulation = this.calculateTotalPopulationFrom(filteredCountries);\n      this.setState({\n        filteredCountries,\n        filteredPopulation\n      });\n    };\n\n    this.state = {\n      allCountries: [],\n      // este filtro que vai mudar com o tempo\n      filteredCountries: [],\n      filteredPopulation: 0,\n      //filter nunca pode ser nulo ou undefined, trabalhando com input deve  ser vazio\n      filter: ''\n    };\n  }\n\n  async componentDidMount() {\n    //O res vai receber um await do fetch da  url\n    const res = await fetch('https://restcountries.eu/rest/v2/all'); //O json vai ser um await do res em json\n\n    const json = await res.json(); // dessestruturando o projeto direto e criando uma array com os elemento necessários\n\n    const allCountries = json.map(({\n      name,\n      numericCode,\n      flag,\n      population\n    }) => {\n      return {\n        id: numericCode,\n        name,\n        filterName: name.toLowerCase(),\n        flag,\n        population\n      };\n    });\n    const filteredPopulation = this.calculateTotalPopulationFrom(allCountries);\n    this.setState({\n      //allCountris foi atribuido diretamente\n      // identificar e valor reference a mesma variavel\n      allCountries,\n      //filtered será sempre o mesmo conteúdo de allcountries\n      filteredCountries: Object.assign([], allCountries),\n      filteredPopulation\n    }); //console.log(json); mostra todos os países\n  }\n\n  render() {\n    const {\n      filteredCountries,\n      filter,\n      filteredPopulation\n    } = this.state; // O console.log mostra nossa nova lista de arrays\n    // console.log(allCountries);\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, \"React Countries\"), /*#__PURE__*/React.createElement(Headers, {\n      filter: filter,\n      countryCount: filteredCountries.length,\n      totalPopulation: filteredPopulation,\n      onChangeFilter: this.handleChangeFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Countries, {\n      countries: filteredCountries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nconst styles = {\n  centeredTitle: {\n    textAlign: 'center'\n  }\n};","map":{"version":3,"sources":["/Users/andreluizbranco/Desktop/react_IGTI/desafio2/src/App.js"],"names":["React","Component","Countries","Headers","App","constructor","calculateTotalPopulationFrom","countries","totalPopulation","reduce","accumulator","current","population","handleChangeFilter","newText","setState","filter","filterLowerCase","toLowerCase","filteredCountries","state","allCountries","country","filterName","includes","filteredPopulation","componentDidMount","res","fetch","json","map","name","numericCode","flag","id","Object","assign","render","length","styles","centeredTitle","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Countries from './components/countries/Countries';\nimport Headers from './components/countries/header/Headers';\n\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      allCountries: [],\n      // este filtro que vai mudar com o tempo\n      filteredCountries: [],\n      filteredPopulation: 0,\n      //filter nunca pode ser nulo ou undefined, trabalhando com input deve  ser vazio\n      filter: '',\n    };\n  }\n\n  async componentDidMount() {\n    //O res vai receber um await do fetch da  url\n    const res = await fetch('https://restcountries.eu/rest/v2/all');\n    //O json vai ser um await do res em json\n    const json = await res.json();\n    // dessestruturando o projeto direto e criando uma array com os elemento necessários\n    const allCountries = json.map(({ name, numericCode, flag, population }) => {\n      return {\n        id: numericCode,\n        name,\n        filterName: name.toLowerCase(),\n        flag,\n        population,\n      };\n    });\n\n    const filteredPopulation = this.calculateTotalPopulationFrom(allCountries);\n\n    this.setState({\n      //allCountris foi atribuido diretamente\n      // identificar e valor reference a mesma variavel\n      allCountries,\n      //filtered será sempre o mesmo conteúdo de allcountries\n      filteredCountries: Object.assign([], allCountries),\n      filteredPopulation,\n    });\n    //console.log(json); mostra todos os países\n  }\n\n  calculateTotalPopulationFrom = (countries) => {\n    const totalPopulation = countries.reduce((accumulator, current) => {\n      return accumulator + current.population;\n    }, 0);\n    return totalPopulation;\n  };\n\n  handleChangeFilter = (newText) => {\n    //console.log(newFilter);\n    this.setState({\n      filter: newText,\n    });\n    const filterLowerCase = newText.toLowerCase();\n\n    const filteredCountries = this.state.allCountries.filter((country) => {\n      return country.filterName.includes(filterLowerCase);\n    });\n\n    const filteredPopulation = this.calculateTotalPopulationFrom(\n      filteredCountries\n    );\n\n    this.setState({\n      filteredCountries,\n      filteredPopulation,\n    });\n  };\n\n  render() {\n    const { filteredCountries, filter, filteredPopulation } = this.state;\n    // O console.log mostra nossa nova lista de arrays\n    // console.log(allCountries);\n    return (\n      <div className=\"container\">\n        <h1>React Countries</h1>\n\n        <Headers\n          filter={filter}\n          countryCount={filteredCountries.length}\n          totalPopulation={filteredPopulation}\n          onChangeFilter={this.handleChangeFilter}\n        />\n        <Countries countries={filteredCountries} />\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  centeredTitle: {\n    textAlign: 'center',\n  },\n};\n"]},"metadata":{},"sourceType":"module"}